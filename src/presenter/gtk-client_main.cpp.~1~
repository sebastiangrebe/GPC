/*
 * Copyright (C) 2010-2011 Daniel Richter <danielrichter2007@web.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "grubCustomizer.h"
#include "eventListener.h"
#include "../model/grubEnv.h"
#include "../view/grublistCfgDlgGtk.h"
#include "../view/aboutDialogGtk.h"
#include "../view/grubInstallDlgGtk.h"
#include "../view/partitionChooserGtk.h"
#include "../view/scriptAddDlgGtk.h"
#include "../view/settingsDlgGtk.h"
#include "glibMutex.h"
#include "glibThreadController.h"
#include "streamLogger.h"
#include <iostream>
#include <polkit/polkit.h>

gboolean
on_tensec_timeout (gpointer user_data)
{
//	gpointer loop = user_data;
//  g_print ("Ten seconds has passed. Now exiting.\n");
//  g_main_loop_quit (loop);
  return FALSE;
}

void
check_authorization_cb (PolkitAuthority *authority,
                        GAsyncResult    *res,
                        gpointer         user_data)
{
	gpointer loop = user_data;
  PolkitAuthorizationResult *result;
  GError *error;

  error = NULL;
  result = polkit_authority_check_authorization_finish (authority, res, &error);
  if (error != NULL)
    {
      g_print ("Error checking authorization: %s\n", error->message);
      g_error_free (error);
    }
  else
    {
      const gchar *result_str;
      if (polkit_authorization_result_get_is_authorized (result))
        {
          result_str = "authorized";
          fopen("/foo", "w");
        }
      else if (polkit_authorization_result_get_is_challenge (result))
        {
          result_str = "challenge";
        }
      else
        {
          result_str = "not authorized";
        }

      g_print ("Authorization result: %s\n", result_str);
    }

  g_print ("Authorization check has been cancelled and the dialog should now be hidden.\n"
           "This process will exit in ten seconds.\n");
  g_timeout_add (10000, on_tensec_timeout, loop);
}

int main(int argc, char** argv){
	setlocale( LC_ALL, "");
	bindtextdomain( "grub-customizer", LOCALEDIR);
	textdomain( "grub-customizer" );

	Gtk::Main app(argc, argv);
	Glib::thread_init();

	pid_t parent_pid;
	const gchar *action_id;
	GMainLoop *loop;
	PolkitSubject *subject;
	PolkitAuthority *authority;
	GCancellable *cancellable;

	  g_type_init ();

	  action_id = "org.freedesktop.policykit.exec";

	  loop = g_main_loop_new (NULL, FALSE);

	  authority = polkit_authority_get_sync (NULL, NULL);

	  /* Typically mechanisms will use a PolkitSystemBusName since most
	   * clients communicate with the mechanism via D-Bus. However for
	   * this simple example we use the process id of the calling process.
	   *
	   * Note that if the parent was reaped we have to be careful not to
	   * check if init(1) is authorized (it always is).
	   */
	  parent_pid = getppid ();
	  if (parent_pid == 1)
	    {
	      g_printerr ("Parent process was reaped by init(1)\n");
	      return 1;
	    }
	  subject = polkit_unix_process_new (parent_pid);

	  cancellable = g_cancellable_new ();

	  g_print ("Will cancel authorization check in 10 seconds\n");

	  /* Set up a 10 second timer to cancel the check */
//	  g_timeout_add (10 * 1000,
//	                 (GSourceFunc) do_cancel,
//	                 cancellable);

	  polkit_authority_check_authorization (authority,
	                                        subject,
	                                        action_id,
	                                        NULL, /* PolkitDetails */
	                                        POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION,
	                                        cancellable,
	                                        (GAsyncReadyCallback) check_authorization_cb,
	                                        loop);

	  g_main_loop_run (loop);


sleep(5);

return 0;
	GrubEnv env;

	GrubCustomizer presenter(env);

	GrublistCfg listcfg(env);
	GrublistCfgDlgGtk listCfgView;
	SettingsManagerDataStore settings(env);
	SettingsManagerDataStore settingsOnDisk(env);
	GrubInstaller installer(env);
	GrubInstallDlgGtk installDlg;
	ScriptAddDlgGtk scriptAddDlg;
	MountTable mountTable;
	PartitionChooserGtk partitionChooser;
	GrublistCfg savedListCfg(env);
	FbResolutionsGetter fbResolutionsGetter;
	GrubSettingsDlgGtk settingsDlg;
	DeviceDataList deviceDataList;
	AboutDialogGtk aboutDialog;
	GlibMutex listCfgMutex1;
	GlibMutex listCfgMutex2;
	GlibThreadController threadC(presenter);

	//assign objects to presenter
	presenter.setListCfg(listcfg);
	presenter.setListCfgDlg(listCfgView);
	presenter.setSettingsDialog(settingsDlg);
	presenter.setSettingsManager(settings);
	presenter.setSettingsBuffer(settingsOnDisk);
	presenter.setInstaller(installer);
	presenter.setInstallDlg(installDlg);
	presenter.setScriptAddDlg(scriptAddDlg);
	presenter.setPartitionChooser(partitionChooser);
	presenter.setSavedListCfg(savedListCfg);
	presenter.setFbResolutionsGetter(fbResolutionsGetter);
	presenter.setDeviceDataList(deviceDataList);
	presenter.setMountTable(mountTable);
	presenter.setAboutDialog(aboutDialog);
	presenter.setThreadController(threadC);

	//assign event listener
	EventListener evt(presenter);
	listCfgView.setEventListener(evt);
	installDlg.setEventListener(evt);
	scriptAddDlg.setEventListener(evt);
	settingsDlg.setEventListener(evt);
	partitionChooser.setEventListener(evt);
	listcfg.setEventListener(evt);
	installer.setEventListener(evt);
	fbResolutionsGetter.setEventListener(evt);
	
	//assign logger
	StreamLogger logger(std::cout);
	presenter.setLogger(logger);
	listcfg.setLogger(logger);
	listCfgView.setLogger(logger);
	settings.setLogger(logger);
	settingsOnDisk.setLogger(logger);
	installer.setLogger(logger);
	installDlg.setLogger(logger);
	scriptAddDlg.setLogger(logger);
	mountTable.setLogger(logger);
	partitionChooser.setLogger(logger);
	savedListCfg.setLogger(logger);
	fbResolutionsGetter.setLogger(logger);
	settingsDlg.setLogger(logger);
	deviceDataList.setLogger(logger);
	aboutDialog.setLogger(logger);
	listCfgMutex1.setLogger(logger);
	listCfgMutex2.setLogger(logger);
	threadC.setLogger(logger);
	env.setLogger(logger);


	
	listcfg.setMutex(listCfgMutex1);
	savedListCfg.setMutex(listCfgMutex2);

	presenter.init();
	app.run();
}

